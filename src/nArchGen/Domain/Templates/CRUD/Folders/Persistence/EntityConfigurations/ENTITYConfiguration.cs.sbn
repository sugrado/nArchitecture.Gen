using Domain.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;

namespace Persistence.EntityConfigurations;

public class {{ entity.name | string.pascalcase }}Configuration : IEntityTypeConfiguration<{{ entity.name | string.pascalcase }}>
{
    public void Configure(EntityTypeBuilder<{{ entity.name | string.pascalcase }}> builder)
    {
        builder.ToTable("{{ entity.name | string.pascalcase | string.plural }}").HasKey({{ entity.name | string.abbreviation }} => {{ entity.name | string.abbreviation }}.Id);

        builder.Property({{ entity.name | string.abbreviation }} => {{ entity.name | string.abbreviation }}.Id).HasColumnName("id").IsRequired();{{ for propertyItem in entity.properties }}
        builder.Property({{ entity.name | string.abbreviation }} => {{ entity.name | string.abbreviation }}.{{ propertyItem.name }}).HasColumnName("{{ propertyItem.name }}");{{ end }}
        builder.Property({{ entity.name | string.abbreviation }} => {{ entity.name | string.abbreviation }}.CreatedAt).HasColumnName("created_at").IsRequired();
        builder.Property({{ entity.name | string.abbreviation }} => {{ entity.name | string.abbreviation }}.UpdatedAt).HasColumnName("updated_at");
        builder.Property({{ entity.name | string.abbreviation }} => {{ entity.name | string.abbreviation }}.DeletedAt).HasColumnName("deleted_at");

        builder.HasQueryFilter({{ entity.name | string.abbreviation }} => !{{ entity.name | string.abbreviation }}.DeletedAt.HasValue);
    }
}